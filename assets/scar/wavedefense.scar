-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("gameplay/diplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
import("winconditions/annihilation.scar")		-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")			-- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI

_mod = {
	module = "WaveDefense",
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

wave = 1
difficulty = 1
ENEMY_ID = 4

function WaveDefense_OnInit()
	options_selected = {}
    Setup_GetWinConditionOptions(options_selected)
	if options_selected.difficulty.wave.enum_value == options_selected.difficulty.wave.enum_items.easy then
        difficulty = 1
    elseif options_selected.difficulty.wave.enum_value == options_selected.difficulty.wave.enum_items.medium then
        difficulty = 2
	elseif options_selected.difficulty.wave.enum_value == options_selected.difficulty.wave.enum_items.hard then
        difficulty = 3
    end
	local playerCount = World_GetPlayerCount() - 1
	print(playerCount)
	
	difficulty = difficulty * playerCount 
	
	Player_SetMaxPopulation(PLAYERS[ENEMY_ID].id, CT_Personnel, 200)
	
	Rule_AddInterval(WaveDefense_SpawnUnits, 5)
end
	
function WaveDefense_SpawnUnits()
	local sbp_spearman = BP_GetSquadBlueprint("unit_spearman_1_hre")
	local spawn_position = Marker_GetPosition(SpawnPoint1)
	local sgroup_name = "sg_wave_" .. tostring(wave)
	local sg_wave = SGroup_CreateIfNotFound(sgroup_name)
	UnitEntry_DeploySquads(PLAYERS[ENEMY_ID].id, sg_wave, {{sbp = sbp_spearman, numSquads = wave*difficulty }}, spawn_position)
	AI_LockSquads(PLAYERS[ENEMY_ID].id, sg_wave)
	local move_position = Marker_GetPosition(TargetPoint1)
	
	Cmd_Ability(sg_wave, BP_GetAbilityBlueprint("core_formation_line"))
	Cmd_FormationAttackMove(sg_wave, move_position, false)
	
end